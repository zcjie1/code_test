<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>do_group_exit (16,216 samples, 1.32%)</title><rect x="1115.2" y="469" width="15.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1118.16" y="479.5" ></text>
</g>
<g >
<title>mas_walk (15,272 samples, 1.24%)</title><rect x="1059.4" y="453" width="14.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1062.40" y="463.5" ></text>
</g>
<g >
<title>ctx_sched_out (16,216 samples, 1.32%)</title><rect x="1115.2" y="421" width="15.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1118.16" y="431.5" ></text>
</g>
<g >
<title>tick_program_event (18,150 samples, 1.47%)</title><rect x="1097.8" y="229" width="17.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1100.76" y="239.5" ></text>
</g>
<g >
<title>perf_event_exit_task (16,216 samples, 1.32%)</title><rect x="1115.2" y="437" width="15.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1118.16" y="447.5" ></text>
</g>
<g >
<title>perf_event_task_tick (12,404 samples, 1.01%)</title><rect x="1011.0" y="357" width="11.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1014.01" y="367.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (211,741 samples, 17.20%)</title><rect x="375.8" y="213" width="202.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="378.77" y="223.5" >__smp_call_single_queue</text>
</g>
<g >
<title>ttwu_queue_wakelist (211,741 samples, 17.20%)</title><rect x="375.8" y="229" width="202.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="378.77" y="239.5" >ttwu_queue_wakelist</text>
</g>
<g >
<title>__pmu_ctx_sched_out (16,216 samples, 1.32%)</title><rect x="1115.2" y="405" width="15.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1118.16" y="415.5" ></text>
</g>
<g >
<title>vma_alloc_folio (18,175 samples, 1.48%)</title><rect x="1097.7" y="373" width="17.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1100.73" y="383.5" ></text>
</g>
<g >
<title>__cond_resched (20,861 samples, 1.69%)</title><rect x="313.4" y="325" width="20.0" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="316.43" y="335.5" ></text>
</g>
<g >
<title>tty_write (716,424 samples, 58.20%)</title><rect x="263.8" y="405" width="686.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="266.76" y="415.5" >tty_write</text>
</g>
<g >
<title>__raw_spin_lock_irqsave (51,819 samples, 4.21%)</title><rect x="263.8" y="309" width="49.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="266.76" y="319.5" >__raw..</text>
</g>
<g >
<title>scheduler_tick (12,404 samples, 1.01%)</title><rect x="1011.0" y="373" width="11.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1014.01" y="383.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (20,922 samples, 1.70%)</title><rect x="1002.8" y="485" width="20.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1005.84" y="495.5" ></text>
</g>
<g >
<title>_dl_setup_hash (43,615 samples, 3.54%)</title><rect x="1032.2" y="517" width="41.8" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1035.23" y="527.5" >_dl..</text>
</g>
<g >
<title>__schedule (20,861 samples, 1.69%)</title><rect x="313.4" y="309" width="20.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="316.43" y="319.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (12,404 samples, 1.01%)</title><rect x="1011.0" y="341" width="11.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1014.01" y="351.5" ></text>
</g>
<g >
<title>amd_pmu_check_overflow (20,861 samples, 1.69%)</title><rect x="313.4" y="197" width="20.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="316.43" y="207.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (9,735 samples, 0.79%)</title><rect x="1022.9" y="501" width="9.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1025.90" y="511.5" ></text>
</g>
<g >
<title>native_read_msr (117,875 samples, 9.58%)</title><rect x="837.5" y="53" width="113.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="840.51" y="63.5" >native_read_msr</text>
</g>
<g >
<title>handle_pte_fault (34,876 samples, 2.83%)</title><rect x="1081.7" y="421" width="33.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1084.72" y="431.5" >ha..</text>
</g>
<g >
<title>queue_work_on (643,744 samples, 52.29%)</title><rect x="333.4" y="293" width="617.1" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="336.43" y="303.5" >queue_work_on</text>
</g>
<g >
<title>do_exit (16,216 samples, 1.32%)</title><rect x="1115.2" y="453" width="15.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1118.16" y="463.5" ></text>
</g>
<g >
<title>amd_pmu_check_overflow (4,069 samples, 0.33%)</title><rect x="1011.0" y="293" width="3.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1014.01" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (51,819 samples, 4.21%)</title><rect x="263.8" y="325" width="49.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="266.76" y="335.5" >_raw_..</text>
</g>
<g >
<title>amd_pmu_test_overflow_topbit (16,216 samples, 1.32%)</title><rect x="1115.2" y="309" width="15.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1118.16" y="319.5" ></text>
</g>
<g >
<title>perf_event_task_tick (128,576 samples, 10.44%)</title><rect x="827.3" y="133" width="123.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="830.25" y="143.5" >perf_event_task..</text>
</g>
<g >
<title>amd_pmu_test_overflow_topbit (4,069 samples, 0.33%)</title><rect x="1011.0" y="277" width="3.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1014.01" y="287.5" ></text>
</g>
<g >
<title>perf_event_context_sched_out (20,861 samples, 1.69%)</title><rect x="313.4" y="261" width="20.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="316.43" y="271.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (18,152 samples, 1.47%)</title><rect x="1097.8" y="245" width="17.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1100.76" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (16,216 samples, 1.32%)</title><rect x="1115.2" y="517" width="15.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1118.16" y="527.5" ></text>
</g>
<g >
<title>native_write_msr (211,741 samples, 17.20%)</title><rect x="375.8" y="181" width="202.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="378.77" y="191.5" >native_write_msr</text>
</g>
<g >
<title>do_cow_fault (34,876 samples, 2.83%)</title><rect x="1081.7" y="389" width="33.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1084.72" y="399.5" >do..</text>
</g>
<g >
<title>amd_pmu_disable_all (128,576 samples, 10.44%)</title><rect x="827.3" y="85" width="123.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="830.25" y="95.5" >amd_pmu_disable..</text>
</g>
<g >
<title>__folio_alloc (18,175 samples, 1.48%)</title><rect x="1097.7" y="357" width="17.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1100.73" y="367.5" ></text>
</g>
<g >
<title>amd_pmu_test_overflow_topbit (10,701 samples, 0.87%)</title><rect x="827.3" y="53" width="10.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="830.25" y="63.5" ></text>
</g>
<g >
<title>amd_pmu_disable_all (12,404 samples, 1.01%)</title><rect x="1011.0" y="309" width="11.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1014.01" y="319.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (387,832 samples, 31.51%)</title><rect x="578.7" y="229" width="371.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="581.74" y="239.5" >hrtimer_interrupt</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (29,796 samples, 2.42%)</title><rect x="994.3" y="501" width="28.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="997.34" y="511.5" >as..</text>
</g>
<g >
<title>enqueue_hrtimer (259,256 samples, 21.06%)</title><rect x="578.7" y="197" width="248.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="581.74" y="207.5" >enqueue_hrtimer</text>
</g>
<g >
<title>_dl_map_object (48,512 samples, 3.94%)</title><rect x="985.7" y="533" width="46.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="988.73" y="543.5" >_dl_..</text>
</g>
<g >
<title>ksys_write (716,424 samples, 58.20%)</title><rect x="263.8" y="437" width="686.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="266.76" y="447.5" >ksys_write</text>
</g>
<g >
<title>vfs_write (716,424 samples, 58.20%)</title><rect x="263.8" y="421" width="686.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="266.76" y="431.5" >vfs_write</text>
</g>
<g >
<title>__alloc_pages (18,175 samples, 1.48%)</title><rect x="1097.7" y="341" width="17.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1100.73" y="351.5" ></text>
</g>
<g >
<title>x86_pmu_disable_all (117,875 samples, 9.58%)</title><rect x="837.5" y="69" width="113.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="840.51" y="79.5" >x86_pmu_disab..</text>
</g>
<g >
<title>x86_pmu_disable (128,576 samples, 10.44%)</title><rect x="827.3" y="101" width="123.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="830.25" y="111.5" >x86_pmu_disable</text>
</g>
<g >
<title>n_tty_write (664,605 samples, 53.99%)</title><rect x="313.4" y="357" width="637.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="316.43" y="367.5" >n_tty_write</text>
</g>
<g >
<title>tick_sched_handle (128,576 samples, 10.44%)</title><rect x="827.3" y="181" width="123.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="830.25" y="191.5" >tick_sched_handle</text>
</g>
<g >
<title>do_user_addr_fault (42,894 samples, 3.48%)</title><rect x="1074.0" y="469" width="41.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1077.04" y="479.5" >do_..</text>
</g>
<g >
<title>x86_pmu_stop (16,216 samples, 1.32%)</title><rect x="1115.2" y="341" width="15.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1118.16" y="351.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (18,152 samples, 1.47%)</title><rect x="1097.8" y="277" width="17.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1100.76" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (387,832 samples, 31.51%)</title><rect x="578.7" y="261" width="371.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="581.74" y="271.5" >sysvec_apic_timer_interrupt</text>
</g>
<g >
<title>wake_up_process (211,741 samples, 17.20%)</title><rect x="375.8" y="261" width="202.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="378.77" y="271.5" >wake_up_process</text>
</g>
<g >
<title>x86_pmu_disable (12,404 samples, 1.01%)</title><rect x="1011.0" y="325" width="11.9" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1014.01" y="335.5" ></text>
</g>
<g >
<title>finish_fault (16,701 samples, 1.36%)</title><rect x="1081.7" y="373" width="16.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1084.72" y="383.5" ></text>
</g>
<g >
<title>all (1,230,998 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>get_page_from_freelist (18,175 samples, 1.48%)</title><rect x="1097.7" y="325" width="17.5" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1100.73" y="335.5" ></text>
</g>
<g >
<title>native_read_msr (20,861 samples, 1.69%)</title><rect x="313.4" y="165" width="20.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="316.43" y="175.5" ></text>
</g>
<g >
<title>lapic_next_event (18,150 samples, 1.47%)</title><rect x="1097.8" y="197" width="17.4" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1100.76" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16,216 samples, 1.32%)</title><rect x="1115.2" y="533" width="15.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1118.16" y="543.5" ></text>
</g>
<g >
<title>scheduler_tick (128,576 samples, 10.44%)</title><rect x="827.3" y="149" width="123.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="830.25" y="159.5" >scheduler_tick</text>
</g>
<g >
<title>do_fault (14,481 samples, 1.18%)</title><rect x="1045.5" y="405" width="13.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1048.52" y="415.5" ></text>
</g>
<g >
<title>next_uptodate_page (14,481 samples, 1.18%)</title><rect x="1045.5" y="357" width="13.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1048.52" y="367.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14,481 samples, 1.18%)</title><rect x="1045.5" y="437" width="13.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1048.52" y="447.5" ></text>
</g>
<g >
<title>exc_page_fault (29,753 samples, 2.42%)</title><rect x="1045.5" y="485" width="28.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1048.52" y="495.5" >ex..</text>
</g>
<g >
<title>native_read_msr (16,216 samples, 1.32%)</title><rect x="1115.2" y="293" width="15.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1118.16" y="303.5" ></text>
</g>
<g >
<title>tick_sched_handle (20,922 samples, 1.70%)</title><rect x="1002.8" y="405" width="20.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1005.84" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (16,216 samples, 1.32%)</title><rect x="1115.2" y="485" width="15.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1118.16" y="495.5" ></text>
</g>
<g >
<title>do_user_addr_fault (29,753 samples, 2.42%)</title><rect x="1045.5" y="469" width="28.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1048.52" y="479.5" >do..</text>
</g>
<g >
<title>__hrtimer_run_queues (20,922 samples, 1.70%)</title><rect x="1002.8" y="437" width="20.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1005.84" y="447.5" ></text>
</g>
<g >
<title>native_read_msr (4,069 samples, 0.33%)</title><rect x="1011.0" y="261" width="3.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1014.01" y="271.5" ></text>
</g>
<g >
<title>x64_sys_call (16,216 samples, 1.32%)</title><rect x="1115.2" y="501" width="15.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1118.16" y="511.5" ></text>
</g>
<g >
<title>fstatat64 (48,512 samples, 3.94%)</title><rect x="985.7" y="517" width="46.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="988.73" y="527.5" >fsta..</text>
</g>
<g >
<title>tick_sched_timer (20,922 samples, 1.70%)</title><rect x="1002.8" y="421" width="20.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1005.84" y="431.5" ></text>
</g>
<g >
<title>file_tty_write.constprop.0 (716,424 samples, 58.20%)</title><rect x="263.8" y="389" width="686.7" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="266.76" y="399.5" >file_tty_write.constprop.0</text>
</g>
<g >
<title>__hrtimer_run_queues (387,832 samples, 31.51%)</title><rect x="578.7" y="213" width="371.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="581.74" y="223.5" >__hrtimer_run_queues</text>
</g>
<g >
<title>do_syscall_64 (716,424 samples, 58.20%)</title><rect x="263.8" y="485" width="686.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="266.76" y="495.5" >do_syscall_64</text>
</g>
<g >
<title>hrtimer_interrupt (20,922 samples, 1.70%)</title><rect x="1002.8" y="453" width="20.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1005.84" y="463.5" ></text>
</g>
<g >
<title>clear_page_erms (18,175 samples, 1.48%)</title><rect x="1097.7" y="309" width="17.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1100.73" y="319.5" ></text>
</g>
<g >
<title>__wake_up (51,819 samples, 4.21%)</title><rect x="263.8" y="357" width="49.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="266.76" y="367.5" >__wak..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (18,152 samples, 1.47%)</title><rect x="1097.8" y="261" width="17.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1100.76" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (43,615 samples, 3.54%)</title><rect x="1032.2" y="501" width="41.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1035.23" y="511.5" >asm..</text>
</g>
<g >
<title>event_sched_out (16,216 samples, 1.32%)</title><rect x="1115.2" y="373" width="15.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1118.16" y="383.5" ></text>
</g>
<g >
<title>x86_pmu_disable (20,861 samples, 1.69%)</title><rect x="313.4" y="229" width="20.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="316.43" y="239.5" ></text>
</g>
<g >
<title>handle_mm_fault (14,481 samples, 1.18%)</title><rect x="1045.5" y="453" width="13.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1048.52" y="463.5" ></text>
</g>
<g >
<title>group_sched_out (16,216 samples, 1.32%)</title><rect x="1115.2" y="389" width="15.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1118.16" y="399.5" ></text>
</g>
<g >
<title>amd_pmu_check_overflow (10,701 samples, 0.87%)</title><rect x="827.3" y="69" width="10.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="830.25" y="79.5" ></text>
</g>
<g >
<title>filemap_map_pages (14,481 samples, 1.18%)</title><rect x="1045.5" y="373" width="13.9" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="1048.52" y="383.5" ></text>
</g>
<g >
<title>[unknown] (1,017,898 samples, 82.69%)</title><rect x="10.0" y="533" width="975.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >[unknown]</text>
</g>
<g >
<title>test (1,230,998 samples, 100.00%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >test</text>
</g>
<g >
<title>perf_ctx_disable (20,861 samples, 1.69%)</title><rect x="313.4" y="245" width="20.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="316.43" y="255.5" ></text>
</g>
<g >
<title>amd_pmu_disable_event (16,216 samples, 1.32%)</title><rect x="1115.2" y="325" width="15.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1118.16" y="335.5" ></text>
</g>
<g >
<title>tick_sched_timer (128,576 samples, 10.44%)</title><rect x="827.3" y="197" width="123.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="830.25" y="207.5" >tick_sched_timer</text>
</g>
<g >
<title>native_read_msr (10,701 samples, 0.87%)</title><rect x="827.3" y="37" width="10.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="830.25" y="47.5" ></text>
</g>
<g >
<title>do_fault (34,876 samples, 2.83%)</title><rect x="1081.7" y="405" width="33.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1084.72" y="415.5" >do..</text>
</g>
<g >
<title>update_process_times (128,576 samples, 10.44%)</title><rect x="827.3" y="165" width="123.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="830.25" y="175.5" >update_process_..</text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (643,744 samples, 52.29%)</title><rect x="333.4" y="309" width="617.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="336.43" y="319.5" >tty_insert_flip_string_and_push_buffer</text>
</g>
<g >
<title>asm_exc_page_fault (42,894 samples, 3.48%)</title><rect x="1074.0" y="501" width="41.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1077.04" y="511.5" >asm..</text>
</g>
<g >
<title>pty_write (643,744 samples, 52.29%)</title><rect x="333.4" y="325" width="617.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="336.43" y="335.5" >pty_write</text>
</g>
<g >
<title>x64_sys_call (716,424 samples, 58.20%)</title><rect x="263.8" y="469" width="686.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="266.76" y="479.5" >x64_sys_call</text>
</g>
<g >
<title>do_tty_write (716,424 samples, 58.20%)</title><rect x="263.8" y="373" width="686.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="266.76" y="383.5" >do_tty_write</text>
</g>
<g >
<title>handle_mm_fault (34,876 samples, 2.83%)</title><rect x="1081.7" y="453" width="33.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1084.72" y="463.5" >ha..</text>
</g>
<g >
<title>update_process_times (20,922 samples, 1.70%)</title><rect x="1002.8" y="389" width="20.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1005.84" y="399.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (211,741 samples, 17.20%)</title><rect x="375.8" y="197" width="202.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="378.77" y="207.5" >native_send_call_func_sing..</text>
</g>
<g >
<title>perf_event_task_tick (8,518 samples, 0.69%)</title><rect x="1002.8" y="373" width="8.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1005.84" y="383.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (387,832 samples, 31.51%)</title><rect x="578.7" y="277" width="371.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="581.74" y="287.5" >asm_sysvec_apic_timer_interrupt</text>
</g>
<g >
<title>__handle_mm_fault (34,876 samples, 2.83%)</title><rect x="1081.7" y="437" width="33.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1084.72" y="447.5" >__..</text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (16,701 samples, 1.36%)</title><rect x="1081.7" y="357" width="16.0" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1084.72" y="367.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (20,922 samples, 1.70%)</title><rect x="1002.8" y="469" width="20.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1005.84" y="479.5" ></text>
</g>
<g >
<title>x86_pmu_disable_all (8,335 samples, 0.68%)</title><rect x="1014.9" y="293" width="8.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1017.91" y="303.5" ></text>
</g>
<g >
<title>_itoa_word (36,750 samples, 2.99%)</title><rect x="950.5" y="517" width="35.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="953.50" y="527.5" >_i..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (18,152 samples, 1.47%)</title><rect x="1097.8" y="293" width="17.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1100.76" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_write (981,148 samples, 79.70%)</title><rect x="10.0" y="517" width="940.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >__GI___libc_write</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (387,832 samples, 31.51%)</title><rect x="578.7" y="245" width="371.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="581.74" y="255.5" >__sysvec_apic_timer_interrupt</text>
</g>
<g >
<title>__queue_work (211,741 samples, 17.20%)</title><rect x="375.8" y="277" width="202.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="378.77" y="287.5" >__queue_work</text>
</g>
<g >
<title>amd_pmu_disable_all (20,861 samples, 1.69%)</title><rect x="313.4" y="213" width="20.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="316.43" y="223.5" ></text>
</g>
<g >
<title>prepare_task_switch (20,861 samples, 1.69%)</title><rect x="313.4" y="293" width="20.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="316.43" y="303.5" ></text>
</g>
<g >
<title>_dl_start (42,894 samples, 3.48%)</title><rect x="1074.0" y="517" width="41.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1077.04" y="527.5" >_dl..</text>
</g>
<g >
<title>process_output_block (643,744 samples, 52.29%)</title><rect x="333.4" y="341" width="617.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="336.43" y="351.5" >process_output_block</text>
</g>
<g >
<title>exc_page_fault (42,894 samples, 3.48%)</title><rect x="1074.0" y="485" width="41.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1077.04" y="495.5" >exc..</text>
</g>
<g >
<title>x86_pmu_del (16,216 samples, 1.32%)</title><rect x="1115.2" y="357" width="15.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1118.16" y="367.5" ></text>
</g>
<g >
<title>mutex_lock (20,861 samples, 1.69%)</title><rect x="313.4" y="341" width="20.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="316.43" y="351.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (51,819 samples, 4.21%)</title><rect x="263.8" y="341" width="49.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="266.76" y="351.5" >__wak..</text>
</g>
<g >
<title>native_write_msr (18,150 samples, 1.47%)</title><rect x="1097.8" y="181" width="17.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1100.76" y="191.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (128,576 samples, 10.44%)</title><rect x="827.3" y="117" width="123.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="830.25" y="127.5" >perf_adjust_fre..</text>
</g>
<g >
<title>handle_amd (61,863 samples, 5.03%)</title><rect x="1130.7" y="533" width="59.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1133.70" y="543.5" >handle..</text>
</g>
<g >
<title>do_read_fault (14,481 samples, 1.18%)</title><rect x="1045.5" y="389" width="13.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1048.52" y="399.5" ></text>
</g>
<g >
<title>handle_pte_fault (14,481 samples, 1.18%)</title><rect x="1045.5" y="421" width="13.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1048.52" y="431.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_out (20,861 samples, 1.69%)</title><rect x="313.4" y="277" width="20.0" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="316.43" y="287.5" ></text>
</g>
<g >
<title>try_to_wake_up (211,741 samples, 17.20%)</title><rect x="375.8" y="245" width="202.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="378.77" y="255.5" >try_to_wake_up</text>
</g>
<g >
<title>amd_pmu_test_overflow_topbit (20,861 samples, 1.69%)</title><rect x="313.4" y="181" width="20.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="316.43" y="191.5" ></text>
</g>
<g >
<title>native_read_msr (8,335 samples, 0.68%)</title><rect x="1014.9" y="277" width="8.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1017.91" y="287.5" ></text>
</g>
<g >
<title>timerqueue_add (259,256 samples, 21.06%)</title><rect x="578.7" y="181" width="248.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="581.74" y="191.5" >timerqueue_add</text>
</g>
<g >
<title>_dl_start_user (86,509 samples, 7.03%)</title><rect x="1032.2" y="533" width="83.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1035.23" y="543.5" >_dl_start..</text>
</g>
<g >
<title>__x64_sys_write (716,424 samples, 58.20%)</title><rect x="263.8" y="453" width="686.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="266.76" y="463.5" >__x64_sys_write</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (716,424 samples, 58.20%)</title><rect x="263.8" y="501" width="686.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="266.76" y="511.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>clockevents_program_event (18,150 samples, 1.47%)</title><rect x="1097.8" y="213" width="17.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1100.76" y="223.5" ></text>
</g>
</g>
</svg>
